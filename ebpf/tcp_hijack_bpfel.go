// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTcp_hijack returns the embedded CollectionSpec for tcp_hijack.
func loadTcp_hijack() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Tcp_hijackBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tcp_hijack: %w", err)
	}

	return spec, err
}

// loadTcp_hijackObjects loads tcp_hijack and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tcp_hijackObjects
//	*tcp_hijackPrograms
//	*tcp_hijackMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTcp_hijackObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTcp_hijack()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tcp_hijackSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcp_hijackSpecs struct {
	tcp_hijackProgramSpecs
	tcp_hijackMapSpecs
}

// tcp_hijackSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcp_hijackProgramSpecs struct {
	XdpRedirectProg *ebpf.ProgramSpec `ebpf:"xdp_redirect_prog"`
}

// tcp_hijackMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcp_hijackMapSpecs struct {
	ConntrackMap *ebpf.MapSpec `ebpf:"conntrack_map"`
	QidconfMap   *ebpf.MapSpec `ebpf:"qidconf_map"`
	WhitelistMap *ebpf.MapSpec `ebpf:"whitelist_map"`
	XsksMap      *ebpf.MapSpec `ebpf:"xsks_map"`
}

// tcp_hijackObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTcp_hijackObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcp_hijackObjects struct {
	tcp_hijackPrograms
	tcp_hijackMaps
}

func (o *tcp_hijackObjects) Close() error {
	return _Tcp_hijackClose(
		&o.tcp_hijackPrograms,
		&o.tcp_hijackMaps,
	)
}

// tcp_hijackMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTcp_hijackObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcp_hijackMaps struct {
	ConntrackMap *ebpf.Map `ebpf:"conntrack_map"`
	QidconfMap   *ebpf.Map `ebpf:"qidconf_map"`
	WhitelistMap *ebpf.Map `ebpf:"whitelist_map"`
	XsksMap      *ebpf.Map `ebpf:"xsks_map"`
}

func (m *tcp_hijackMaps) Close() error {
	return _Tcp_hijackClose(
		m.ConntrackMap,
		m.QidconfMap,
		m.WhitelistMap,
		m.XsksMap,
	)
}

// tcp_hijackPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTcp_hijackObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcp_hijackPrograms struct {
	XdpRedirectProg *ebpf.Program `ebpf:"xdp_redirect_prog"`
}

func (p *tcp_hijackPrograms) Close() error {
	return _Tcp_hijackClose(
		p.XdpRedirectProg,
	)
}

func _Tcp_hijackClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tcp_hijack_bpfel.o
var _Tcp_hijackBytes []byte
